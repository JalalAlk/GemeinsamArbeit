---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Meine Nachrichten">
  <main>
    <h1>Meine Nachrichten:</h1>
    <div id="button-container">
      <button id="search-button">Suchen</button>
      <button id="clear-button">Leeren</button>
    </div>
    <div id="search-container" class="hidden">
      <input type="text" id="search-input" placeholder="Suchbegriff eingeben" />
    </div>
    <div id="messages-container">
      <div id="messages"></div>
    </div>
    <a href="/startseite" class="button-lernpartner">StartSeite</a>

    <button id="back-button">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
        <path d="M14 7l-5 5 5 5V7z"/>
      </svg>
      Zurück
    </button>
  </main>
</Layout>

<script type="module">
  document.addEventListener('DOMContentLoaded', function() {
    let messages = JSON.parse(localStorage.getItem('messages')) || [];
    const messagesContainer = document.getElementById('messages');
    const messagesContainerWrapper = document.getElementById('messages-container');
    const backButton = document.getElementById('back-button');
    const clearButton = document.getElementById('clear-button');
    const searchButton = document.getElementById('search-button');
    const searchContainer = document.getElementById('search-container');
    const searchInput = document.getElementById('search-input');

    // Funktion zum Rendern der Nachrichten
    function renderMessages(filteredMessages = messages) {
      if (!messagesContainer) return; // Sicherheitsüberprüfung

      messagesContainer.innerHTML = '';

      filteredMessages.forEach((msg, index) => {
        const messageEl = document.createElement('div');
        messageEl.classList.add('message');
        messageEl.innerHTML =`
          <p><strong>${msg.title}</strong></p>
          <p><strong>${msg.username || 'Nachricht'}:</strong> ${msg.message}</p>
          <p><strong>Art der Partnerschaft:</strong> ${msg.type}</p>
          ${msg.type === 'Gruppe' ? `<p><strong>Gruppe Größe:</strong> ${msg.groupSize}</p>` : ''}
          <p><strong>Wann:</strong> ${msg.date}, Uhrzeit: ${msg.time}</p>
          <button class="delete-button" data-index="${index}">Löschen</button>
        `;

        // Antworten rendern, falls vorhanden
        if (msg.replies && msg.replies.length > 0) {
          const repliesDiv = document.createElement('div');
          repliesDiv.classList.add('replies-container');
          msg.replies.forEach(reply => {
            const replyEl = document.createElement('div');
            replyEl.classList.add('reply');
            replyEl.innerHTML = `<p><strong>${reply.author} antwortet:</strong> ${reply.text}</p>`;
            repliesDiv.appendChild(replyEl);
          });
          messageEl.appendChild(repliesDiv);
        }

        messagesContainer.appendChild(messageEl);
      });

      // Scrollen zum neuesten Eintrag
      messagesContainerWrapper.scrollTop = messagesContainerWrapper.scrollHeight;

      // Speichern der Nachrichten in localStorage
      localStorage.setItem('messages', JSON.stringify(messages));
    }

    // Funktion zum Speichern einer Nachricht
    function saveMessage(title, message, type, date, time) {
      const newMessage = {
        title,
        message,
        type,
        date,
        time,
        replies: []  // Array für Antworten initialisieren
      };
      messages.push(newMessage);
      renderMessages();
    }

    // Funktion zum Löschen einer Nachricht
    function deleteMessage(index) {
      messages.splice(index, 1);
      renderMessages();
    }

    // Event-Listener für die Löschen-Buttons
    messagesContainer.addEventListener('click', function(e) {
      if (e.target.classList.contains('delete-button')) {
        const index = e.target.getAttribute('data-index');
        if (confirm('Sind Sie sicher, dass Sie diese Nachricht löschen möchten?')) {
          deleteMessage(index);
        }
      }
    });

    // Filter für die Suchfunktion
    function filterMessages(query) {
      return messages.filter(msg =>
        msg.title.toLowerCase().includes(query.toLowerCase()) ||
        msg.message.toLowerCase().includes(query.toLowerCase())
      );
    }

    // Such-Button Funktion
    if (searchButton) {
      searchButton.addEventListener('click', () => {
        searchContainer.classList.toggle('hidden');
      });
    }

    // Eingabefeld für die Suchfunktion
    if (searchInput) {
      searchInput.addEventListener('input', () => {
        const query = searchInput.value;
        const filteredMessages = filterMessages(query);
        renderMessages(filteredMessages);
      });
    }

    // Leeren-Button Funktion
    if (clearButton) {
      clearButton.addEventListener('click', () => {
        if (confirm('Sind Sie sicher, dass Sie alle Nachrichten löschen möchten?')) {
          localStorage.removeItem('messages');
          messages = [];
          renderMessages();
          alert('Alle Nachrichten wurden gelöscht!');
        }
      });
    }

    // Zurück-Button Funktion
    if (backButton) {
      backButton.addEventListener('click', () => {
        window.history.back();  // Gehe zur vorherigen Seite
      });
    }
    renderMessages();
  });
</script>


<style>
  :root {
    --background-main: #f4f6f9;
    --text-dark: #242424;
    --button-background: #;
    --button-hover: #0064B2;
    --button-text: #fff;
    --main-background: #e6f1fa;
    --header-bg: #fff;
    --footer-bg: #f4f6f9;
    --message-background: #fff;
    --message-border: #2b2929;
    --delete-button-background: #e04141;
    --delete-button-hover: #ee6c79;
    --back-button-background: #00246B;
    --back-button-hover: #0064B2;
    --search-background: #fff;
    --search-border: #101111;
  }

  h1 {
    color: #00246B;
    margin-left: 33px;
  }

  body {
    background: var(--background-main);
    color: var(--text-dark);
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
  }

  header {
    background: var(--header-bg);
    padding: 1rem;
    color: var(--text-dark);
    text-align: center;
    box-shadow: 0 2px 4px rgb(0 0 0 / 10%);
  }

  nav a {
    color: var(--button-background);
    text-decoration: none;
    margin: 0 0.5rem;
  }

  main {
    padding: 2.5rem;
    width: 100%;
    max-width: 600px;
    font-size: 16px;
    line-height: 1.6;
    position: relative;
    background: var(--main-background);
    border-radius: 20px;
    box-shadow: 0 9px 12px rgb(0 0 0 / 40%);
    margin: 3rem auto;
  }

  #button-container {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1rem;
    margin-left: 15px;
  }

  #search-container {
    display: flex;
    justify-content: center;
    margin-bottom: 1rem;
  }

  #search-container.hidden {
    display: none;
  }

  #search-input {
    margin-right: 210px;
    padding: 0.5rem;
    border-radius: 8px;
    border: 1px solid var(--search-border);
    background: var(--search-background);
    font-size: 16px;
    width: 100%;
    max-width: 300px;
  }

  #messages-container {
    border: none;
    background-color: #e6f1fa;
    padding: 2rem;
    max-height: 500px;
    overflow-y: auto;
  }

  .message {
    position: relative;
    padding: 1rem;
    background: var(--message-background);
    border: 1px solid var(--message-border);
    border-radius: 8px;
    margin-bottom: 1rem;
    padding-left: 4rem; /* Add space for the delete button */
  }

  .message:last-child {
    margin-bottom: 0;
  }

  #search-button, #clear-button {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  #search-button {
    background-color: #00246B;
    margin-left: 20px;
    color: white;
  }

  #search-button:hover {
    background: var(--button-hover);
  }

  #clear-button {
    background: var(--delete-button-background);
    margin-right: 33px;
    color: var(--button-text);
  }

  #clear-button:hover {
    background: var(--delete-button-hover);
  }

  #back-button {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-right: 58px;
    margin-bottom: 33px;
    padding: 0.5rem;
    background: var(--back-button-background);
    color: var(--button-text);
    border: none;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgb(0 0 0 / 40%);
    cursor: pointer;
    transition: background 0.3s ease, transform 0.3s ease;
  }

  #back-button:hover {
    background: var(--back-button-hover);
  }

  #back-button svg {
    fill: currentcolor;
  }
</style>